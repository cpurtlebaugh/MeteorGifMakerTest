{
  "_args": [
    [
      {
        "raw": "gifshot",
        "scope": null,
        "escapedName": "gifshot",
        "name": "gifshot",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/cpurtlebaugh/Desktop/candidate project/MeteorGifMakerTest"
    ]
  ],
  "_from": "gifshot@latest",
  "_id": "gifshot@0.3.2",
  "_inCache": true,
  "_location": "/gifshot",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "gfranko",
    "email": "gregfranko5@gmail.com"
  },
  "_npmVersion": "2.11.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gifshot",
    "scope": null,
    "escapedName": "gifshot",
    "name": "gifshot",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gifshot/-/gifshot-0.3.2.tgz",
  "_shasum": "fd3f040f2184cee22dd95242c69d86d83fb27aa3",
  "_shrinkwrap": null,
  "_spec": "gifshot",
  "_where": "/Users/cpurtlebaugh/Desktop/candidate project/MeteorGifMakerTest",
  "bugs": {
    "url": "https://github.com/yahoo/gifshot/issues"
  },
  "contributors": [
    {
      "name": "Chase West"
    },
    {
      "name": "Greg Franko"
    }
  ],
  "dependencies": {},
  "description": "JavaScript library that can create animated gifs from video streams (e.g. webcam), existing videos (e.g. mp4), or existing images",
  "devDependencies": {
    "amdclean": "latest",
    "chai": "^1.9.1",
    "express": "^4.2.0",
    "gulp": "^3.8.8",
    "gulp-insert": "^0.3.0",
    "gulp-install": "^0.2.0",
    "gulp-istanbul": "^0.3.1",
    "gulp-mocha": "^1.1.0",
    "gulp-rename": "^1.2.0",
    "gulp-rimraf": "^0.1.0",
    "gulp-uglify": "^0.3.0",
    "jshint": "^2.5.6",
    "lodash": "^2.4.1",
    "precommit-hook": "^1.0.7",
    "requirejs": "^2.1.11"
  },
  "directories": {},
  "dist": {
    "shasum": "fd3f040f2184cee22dd95242c69d86d83fb27aa3",
    "tarball": "https://registry.npmjs.org/gifshot/-/gifshot-0.3.2.tgz"
  },
  "engine": {
    "node": ">= 0.8"
  },
  "gitHead": "c1a36b26fa7bbf0200f906d156297874a284e9e8",
  "homepage": "https://github.com/yahoo/gifshot#readme",
  "keywords": [
    "gif",
    "animated gif",
    "WebRTC",
    "getUserMedia"
  ],
  "license": "MIT",
  "main": "./build/gifshot",
  "maintainers": [
    {
      "name": "gfranko",
      "email": "gregfranko5@gmail.com"
    },
    {
      "name": "davglass",
      "email": "davglass@gmail.com"
    }
  ],
  "name": "gifshot",
  "optionalDependencies": {},
  "precommit": [
    "build"
  ],
  "readme": "![](http://i.imgur.com/I17GUX9.gif)\n=======\n\nJavaScript library that can create animated GIFs from media streams, videos, or images\n\n\n## How\n\ngifshot uses the following technologies:\n\n- The webRTC `getUserMedia()` API to get permission to use a user's webcam and manipulate the `CameraStream` Media object\n\n- The HTML5 `Filesystem` APIs to handle the temporary blob URL creation\n\n- The HTML5 `video` element to stream the blob URL\n\n- The `canvas` API to create a dynamic image from an HTML5 video, or images\n\n- `Web workers` to process the GIF frames\n\n- `Typed Arrays` to handle binary image data\n\n- `Base 64 encoding` to create a base 64 encoded image string\n\n\n## Browser Support\n\n - **Animated GIF from Webcam** :\n\n * Firefox 17+, Chrome 21+, Opera 18+, Blackberry Browser 10+, Opera Mobile 12+, Chrome For Android 35+, Firefox for Android 29+\n\n - **Animated GIF from Existing Video** :\n\n * All modern browsers (IE10+)\n\n - **Animated GIF from Existing Images** :\n\n * All modern browsers (IE10+)\n\n\n## Quick Start\n*  Include `gifshot` on your HTML page (`gifshot.js` can be found in the `build` directory)\n\n```html\n<script src='gifshot.js'></script>\n```\n\n*  Start using the JavaScript API to create your animated GIFs\n\n```javascript\n// By default, a user's webcam is used to create the animated GIF\ngifshot.createGIF({}, function(obj) {\n\tif(!obj.error) {\n\t\tvar image = obj.image,\n\t\tanimatedImage = document.createElement('img');\n\t\tanimatedImage.src = image;\n\t\tdocument.body.appendChild(animatedImage);\n\t}\n});\n```\n\n## Demo Set Up\n\n1.  git clone this repo: `git clone git@github.com:yahoo/gifshot.git`\n2.  Install [Node.js](http://nodejs.org/)\n3.  Install all local dependencies: `npm install`\n4.  Start up the included node.js preview server: `npm run preview`\n5.  Go to `localhost:8001` to try out gifshot\n\n![](images/screencastGIF.gif)\n\n\n## API Methods\n\n### createGIF(options, callback)\n\nCreates an animated GIF from either a webcam stream, an existing video (e.g. mp4), or existing images\n\n**Note:** If you wish to use the default options, you can just pass a callback function as the only argument\n\n**Another Note:** An object is passed back to the callback function with helpful data\n\n```javascript\ngifshot.createGIF({}, function(obj) {\n\t// callback object properties\n\t// --------------------------\n\t// image - Base 64 image\n\t// cameraStream - The webRTC MediaStream object\n\t// error - Boolean that determines if an error occurred\n\t// errorCode - Helpful error label\n\t// errorMsg - Helpful error message\n\t// savedRenderingContexts - An array of canvas image data (will only be set if the saveRenderingContexts option was used)\n});\n```\n\n### takeSnapShot(options, callback)\n\nTakes a snap shot (not animated) image from a webcam stream or existing video\n\n**Note:** If you wish to use the default options, you can just pass a callback function as the only argument\n\n**Another Note:** An object is passed back to the callback function with helpful data\n\n```javascript\ngifshot.takeSnapShot({}, function(obj) {\n\t// callback object properties\n\t// --------------------------\n\t// image - Base 64 image\n\t// error - Boolean that determines if an error occurred\n\t// errorCode - Helpful error label\n\t// errorMsg - Helpful error message\n\t// savedRenderingContexts - An array of canvas image data (will only be set if the saveRenderingContexts option was used)\n});\n```\n\n### stopVideoStreaming()\n\nTurns off the user's webcam (by default, the user's webcam is turned off)\n\n**Note:** This is helpful when you use the `keepCameraOn` option\n\n```javascript\ngifshot.stopVideoStreaming();\n```\n\n### isSupported()\n\nIf the current browser supports all of the gifshot animated GIF options\n\n```javascript\ngifshot.isSupported();\n```\n\n### isWebCamGIFSupported()\n\nIf the current browser supports creating animated GIFs from a webcam video stream\n\n```javascript\ngifshot.isWebCamGIFSupported();\n```\n\n### isExistingVideoGIFSupported()\n\nIf the current browser supports creating animated GIFs from an existing HTML video (e.g. mp4, ogg, ogv, webm)\n\n**Note:** You can pass in an array of codec extensions to specifically check if the current browser supports at least one of them\n\n```javascript\ngifshot.isExistingVideoGIFSupported(['mp4', 'ogg']);\n```\n\n### isExistingImagesGIFSupported()\n\nIf the current browser supports creating animated GIFs from existing images (e.g. jpeg, png, gif)\n\n```javascript\ngifshot.isExistingImagesGIFSupported();\n```\n\n## Examples\n\n**Web Cam**\n\n```javascript\ngifshot.createGIF(function(obj) {\n\tif(!obj.error) {\n\t\tvar image = obj.image,\n\t\tanimatedImage = document.createElement('img');\n\t\tanimatedImage.src = image;\n\t\tdocument.body.appendChild(animatedImage);\n\t}\n});\n```\n\n**HTML5 Video**\n\n```javascript\ngifshot.createGIF({\n\t'video': ['example.mp4', 'example.ogv']\n},function(obj) {\n\tif(!obj.error) {\n\t\tvar image = obj.image,\n\t\tanimatedImage = document.createElement('img');\n\t\tanimatedImage.src = image;\n\t\tdocument.body.appendChild(animatedImage);\n\t}\n});\n```\n\n**Images**\n\n```javascript\ngifshot.createGIF({\n\t'images': ['http://i.imgur.com/2OO33vX.jpg', 'http://i.imgur.com/qOwVaSN.png', 'http://i.imgur.com/Vo5mFZJ.gif']\n},function(obj) {\n\tif(!obj.error) {\n\t\tvar image = obj.image,\n\t\tanimatedImage = document.createElement('img');\n\t\tanimatedImage.src = image;\n\t\tdocument.body.appendChild(animatedImage);\n\t}\n});\n```\n\n**Snap Shot**\n\n```javascript\ngifshot.takeSnapShot(function(obj) {\n\tif(!obj.error) {\n\t\tvar image = obj.image,\n\t\tanimatedImage = document.createElement('img');\n\t\tanimatedImage.src = image;\n\t\tdocument.body.appendChild(animatedImage);\n\t}\n});\n```\n\n## Options\n\n```javascript\n// Desired width of the image\n'gifWidth': 200,\n// Desired height of the image\n'gifHeight': 200,\n// If this option is used, then a GIF will be created using these images\n// e.g. ['http://i.imgur.com/2OO33vX.jpg', 'http://i.imgur.com/qOwVaSN.png', 'http://i.imgur.com/Vo5mFZJ.gif'],\n// Note: Make sure these image resources are CORS enabled to prevent any cross-origin JavaScript errors\n// Note: You may also pass a NodeList of existing image elements on the page\n'images': [],\n// If this option is used, then a gif will be created using the appropriate video\n// HTML5 video that you would like to create your animated GIF from\n// Note: Browser support for certain video codecs is checked, and the appropriate video is selected\n// Note: You may also pass a NodeList of existing video elements on the page\n// e.g. 'video': ['example.mp4', 'example.ogv'],\n'video': null,\n// You can pass an existing video element to use for the webcam GIF creation process,\n// and this video element will not be hidden (useful when used with the keepCameraOn option)\n// Pro tip: Set the height and width of the video element to the same values as your future GIF\n// Another Pro Tip: If you use this option, the video will not be paused, the object url not revoked, and\n// the video will not be removed from the DOM.  You will need to handle this yourself.\n'webcamVideoElement': null,\n// Whether or not you would like the user's camera to stay on after the GIF is created\n// Note: The cameraStream Media object is passed back to you in the createGIF() callback function\n'keepCameraOn': false,\n// Expects a cameraStream Media object\n// Note: Passing an existing camera stream will allow you to create another GIF and/or snapshot without\n//\tasking for the user's permission to access the camera again if you are not using SSL\n'cameraStream': null,\n// The amount of time (in seconds) to wait between each frame capture\n'interval': 0.1,\n// The number of frames to use to create the animated GIF\n// Note: Each frame is captured every 100 milleseconds of a video and every ms for existing images\n'numFrames': 10,\n// The text that covers the animated GIF\n'text': '',\n// The font weight of the text that covers the animated GIF\n'fontWeight': 'normal',\n// The font size of the text that covers the animated GIF\n'fontSize': '16px',\n// The minimum font size of the text that covers the animated GIF\n// Note: This option is only applied if the text being applied is cut off\n'minFontSize': '10px',\n// Whether or not the animated GIF text will be resized to fit within the GIF container\n'resizeFont': false,\n// The font family of the text that covers the animated GIF\n'fontFamily': 'sans-serif',\n// The font color of the text that covers the animated GIF\n'fontColor': '#ffffff',\n// The horizontal text alignment of the text that covers the animated GIF\n'textAlign': 'center',\n// The vertical text alignment of the text that covers the animated GIF\n'textBaseline': 'bottom',\n// The X (horizontal) Coordinate of the text that covers the animated GIF (only use this if the default textAlign and textBaseline options don't work for you)\n'textXCoordinate': null,\n// The Y (vertical) Coordinate of the text that covers the animated GIF (only use this if the default textAlign and textBaseline options don't work for you)\n'textYCoordinate': null,\n// Callback function that provides the current progress of the current image\n'progressCallback': function(captureProgress) {},\n// Callback function that is called when the current image is completed\n'completeCallback': function() {},\n// how many pixels to skip when creating the palette. Default is 10. Less is better, but slower.\n// Note: By adjusting the sample interval, you can either produce extremely high-quality images slowly, or produce good images in reasonable times.\n// With a sampleInterval of 1, the entire image is used in the learning phase, while with an interval of 10,\n// a pseudo-random subset of 1/10 of the pixels are used in the learning phase. A sampling factor of 10 gives a\n// substantial speed-up, with a small quality penalty.\n'sampleInterval': 10,\n// how many web workers to use to process the animated GIF frames. Default is 2.\n'numWorkers': 2,\n// Whether or not you would like to save all of the canvas image binary data from your created GIF\n// Note: This is particularly useful for when you want to re-use a GIF to add text to later\n'saveRenderingContexts': false,\n// Expects an array of canvas image data\n// Note: If you set the saveRenderingContexts option to true, then you get the savedRenderingContexts\n//\tin the createGIF callback function\n'savedRenderingContexts': []\n// When existing images or videos are requested used, we set a CORS attribute on the request.\n// Options are 'Anonymous', 'use-credentials', or a falsy value (like '') to not set a CORS attribute.\n'crossOrigin': 'Anonymous'\n```\n\n\n## Custom Builds\n\nWe provide a **gulp** `custom-build` task, that allows you to remove certain dependencies that you may not need.  Pass in the custom build name that you would like (it default to `webcam`):\n\n`gulp custom-build --webcam`\n\n\n**Note:** For custom builds, you need to clone this repo locally.  Also, the unminified and minified custom build files will be in the `build/custom` directory of the local gifshot repo.\n\n\n###Possible build options:\n\n`webcam` - The webcam-to-GIF functionality of gifshot (the existing image/video logic is removed)\n\n`image` - The image-to-GIF functionality of gifshot (the existing webcam/video logic is removed)\n\n`video` - The HTML5 video-to-GIF functionality of gifshot (the existing webcam/image logic is removed)\n\n\n## Contributing\n\nPlease send all PR's to the `dev` branch.\n\nIf your PR is a code change:\n\n1.  Install all node.js dev dependencies: `npm install`\n2.  Update the appropriate module inside of the `src/modules` directory.\n3.  Install gulp.js globally: `sudo npm install gulp -g`\n4.  Concatenate, Lint, Test, and Minify gifshot with Gulp: `gulp`\n5.  Verify that the minified output file has been updated in `build/gifshot.js` and `build/gifshot.min.js` and that no unit tests are failing.\n6.  Send the PR!\n\n**Note:** There is a gulp `watch` task set up that will automatically build, test, and minify gifshot whenever a module inside of the `src/modules` directory is changed.  We recommend using it.\n\n\n## Credits\n\ngifshot would not have been possible without the help/inspiration of the following libraries/awesome people:\n\n###Used\n\n- [NeuQuant](http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\n * An image quantization algorithm to reduce the number of colors required to represent the image (thus decreasing the file size). This script was ported from C into Java by Kevin Weiner and then to [ActionScript 3](http://www.bytearray.org/?p=93) by Thibault Imbert, and to [JavaScript](http://antimatter15.com/wp/2010/07/javascript-to-animated-gif/) by antimatter15, and fixed, patched and revised by [sole](http://soledadpenades.com).\n * Copyright (c) Anthony Dekker 1994 - [MIT License](http://members.ozemail.com.au/~dekker/NEUQUANT.C)\n\n\n- [Dean McNamee](https://github.com/deanm)'s [omggif](https://github.com/deanm/omggif)\n * Encodes a GIF into the GIF89 spec\n * Copyright (c) Dean McNamee, 2013 - [MIT License](https://github.com/deanm/omggif)\n\n\n###Inspiration\n\n- [Soledad Penadés](https://github.com/sole)'s [gumhelper.js](https://github.com/sole/gumhelper)\n * A module wrapping WebRTC's getUserMedia\n\n- [Soledad Penadés](https://github.com/sole)'s [animated_GIF.js](https://github.com/sole/Animated_GIF)\n * Uses web workers and encoding/decoding algorithms to produce a Base 64 data URI image\n\n- [Jen Fong-Adwent](https://github.com/ednapiranha)'s (aka Edna Piranha) [Meatspace Chat](https://chat.meatspac.es/)\n\n## Contributors\n\n#### [Chase West](https://github.com/ChaseWest)\n![](images/chase_west.gif)\n\n#### [Greg Franko](https://github.com/gfranko)\n![](images/greg_franko.gif)\n\n#### [Chris Chernoff](https://github.com/chrischernoff)\n![](images/chris_chernoff.gif)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yahoo/gifshot.git"
  },
  "scripts": {
    "build": "gulp",
    "preview": "node demo/server/server.js",
    "test": "gulp test",
    "watch": "gulp watch"
  },
  "version": "0.3.2"
}
